### Generate empty dataframe
teamsDF <- data.frame(
matrix(rep(times = nparticipants, c("","","","","","","")),nrow = nparticipants)
)
### Some teams are missing all their pokemon, so we will loop through available ones.
for(i in (1:nparticipants)[c(-790,-845)]){
v1 <-
teamsDF[i,] <- c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[790]]$decklist, recursive = F)))$name),NA*1:6),6)
)
}
i
c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[790]]$decklist, recursive = F)))$name),NA*1:6),6)
)
c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[790]]$decklist, recursive = F)))$name),NA*1:6),6)
)
head(c(unlist(unstack(stack(unlist(tournamentData[[790]]$decklist, recursive = F)))$name),NA*1:6),6)
head(c(unlist(unstack(stack(unlist(tournamentData[[790]]$decklist, recursive = F)))$name),NA*1:6))
c(unlist(unstack(stack(unlist(tournamentData[[790]]$decklist, recursive = F)))$name),NA*1:6)
### Some teams are missing all their pokemon, so we will loop through available ones.
for(i in (1:nparticipants)[c(-790,-845)]){
v1 <-
teamsDF[i,] <- c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[i]]$decklist, recursive = F)))$name),NA*1:6),6)
)
}
### Generate empty dataframe
teamsDF <- data.frame(
matrix(rep(times = nparticipants, c("","","","","","","")),nrow = nparticipants)
)
### Some teams are missing all their pokemon, so we will loop through available ones.
for(i in (1:nparticipants)[c(-790,-845)]){
v1 <-
teamsDF[i,] <- c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[i]]$decklist, recursive = F)))$name),NA*1:6),6)
)
}
df
teamsDF
teamsDF[290]
teamsDF[290,]
teamsDF[291,]
teamsDF[289,]
library(dplyr)
library(tidyverse)
library(dplyr)
### Some teams are missing all their Pokemon, so we will loop through available ones.
## I have manually found rows without teams listed and removed them myself
for(i in (1:nparticipants)[c(-790,-845)]){
v1 <-
teamsDF[i,] <- c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[i]]$decklist, recursive = F)))$name),NA*1:6),6)
)
}
library(tidyverse)
source("~/NAIC_VGC_Legendary_Pairs/scripts/generateTeamLists.R")
### Data Cleaning Part 1-- goal is to extract each restricted duo along with the name of the individual who played them
### Resulting data frame should have columns: playerName, restricted1, restricted2
### Load Packages
library(rjson)
library(tidyverse)
### Read json data
tournamentData <- fromJSON(file = "data/NAIC_VGC_Data.json")
nparticipants <- length(tournamentData)
### Generate empty dataframe
teamsDF <- data.frame(
matrix(rep(times = nparticipants, c("","","","","","","")),nrow = nparticipants)
)
### Some teams are missing all their Pokemon, so we will loop through available ones.
## I have manually found rows without teams listed and removed them myself
for(i in (1:nparticipants)[c(-790,-845)]){
v1 <-
teamsDF[i,] <- c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[i]]$decklist, recursive = F)))$name),NA*1:6),6)
)
}
## Convert to tibble for some easy data manipulation
teamsDF <- as_tibble(teamsDF)
teamsDF
## We need a list of restricted Pokemon
restrictedPokemon <- c(
'Mewtwo',
'Lugia',
'Ho-Oh',
'Kyogre',
'Groudon',
'Rayquaza',
'Dialga',
'Palkia',
'Giratina',
'Reshiram',
'Zekrom',
'Kyurem',
'Cosmog',
'Cosmoem',
'Solgaleo',
'Lunala',
'Necrozma',
'Zacian',
'Zamazenta',
'Eternatus',
'Calyrex',
'Koraidon',
'Miraidon',
'Terapagos'
)
restrictedPokemon
restrictedPokemon %in% c('Mewtwo')
c('Mewtwo') %in% restrictedPokemon
c('Mewtwo','Dondozo') %in% restrictedPokemon
'Dog'*FALSE
teamsDF
?funs
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1),funs(.%in%restrictedPokemon))
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1),funs( function(x) x%in%restrictedPokemon ))
test
test1
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1),funs( function(x) x%in%restrictedPokemon ))
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) x%in%restrictedPokemon )
test1
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) c(NA,x)[1+1*(x%in%restrictedPokemon)])
test1
'Urshifu'%in% restrictedPokemon
'Urshifu [Rapid Sstrike Style]'%in% restrictedPokemon
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x)[1+1*(x%in%restrictedPokemon)])
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) (x%in%restrictedPokemon))
test1
teamsDF
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) c(NA,x)[1+1*(x%in%restrictedPokemon)])
test1
x
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) x)
test1
teamsDF
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) x%in%restrictedPokemon)
test1
x
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) 1*(x%in%restrictedPokemon))
test1
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) (1+1*(x%in%restrictedPokemon)))
test1
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) x[(1+1*(x%in%restrictedPokemon))])
test1
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) x)
test1
teamsDF
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) x[1])
test1
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) x)
test1
?na_if
''%in%restrictedPokemon
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) na_if(x%in%restrictedPokemon,FALSE))
test1
if_else
?if_else
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(x%in%restrictedPokemon,x,NA))
test1
str_contains('hello','hel')
str_detect('dog','hello')
str_detect('dog','do')
str_detect('dog',c('do','old'))
max(str_detect('dog',c('do','old')))
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(max(str_detect(x,restrictedPokemon)),x,NA))
grepl
?grepl
testString <- c('Mewtwo','Dondozo')
grepl('o',testString)
grepl(restrictedPokemon,testString)
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(lapply(max(str_detect(x,restrictedPokemon))),x,NA))
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(sapply(max(str_detect(x,restrictedPokemon))),x,NA))
?sapply
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(sapply(x, function(y)max(str_detect(y,restrictedPokemon))),x,NA))
test1
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(lapply(x, function(y) max(str_detect(y,restrictedPokemon))),x,NA))
all(T,T,F)
!all(T,T,F)
!all(T,F,F)
!all(F,F,F)
some(F,F,F)
?all
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(lapply(x, function(y) (str_detect(y,restrictedPokemon))),x,NA))
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(sapply(x, function(y) (str_detect(y,restrictedPokemon))),x,NA))
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(sapply(x, function(y) all(str_detect(y,restrictedPokemon))),x,NA))
test1
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(sapply(x, function(y) !all(str_detect(y,restrictedPokemon))),x,NA))
test1
str_detect(testString,restrictedPokemon)
str_detect('Mewtwo',restrictedPokemon)
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(sapply(x, function(y) logical(max(str_detect(y,restrictedPokemon)))),x,NA))
test1
?vapply
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(vapply(x, function(y) logical(max(str_detect(y,restrictedPokemon))), logical(1)),x,NA))
logical(0)
as_logical(0)
to_logical(0)
as.logical(0)
## Delete non-restricted Pokemon names
test1 <- mutate_at(teamsDF,vars(-X1), function(x) if_else(vapply(x, function(y) as.logical(max(str_detect(y,restrictedPokemon))), logical(1)),x,NA))
test1
## Delete non-restricted Pokemon names
restrictedTeamsDF <- mutate_at(teamsDF,vars(-X1),
function(x) if_else(vapply(x, function(y) as.logical(max(str_detect(y,restrictedPokemon))),
logical(1)),x,NA))
restrictedTeamsDF
is.NA(restrictedTeamsDF)
is.na(restrictedTeamsDF)
!is.na(restrictedTeamsDF)
rowSums(!is.na(restrictedTeamsDF))
?which
which(rowSums(!is.na(restrictedTeamsDF))!=3)
sort(rowSums(!is.na(restrictedTeamsDF)))
## Going to do some string concatenation to get restricted pairs names
restrictedTeamsDF <- mutate_at(teamsDF,vars(-X1),
function(x) if_else(vapply(x, function(y) as.logical(max(str_detect(y,restrictedPokemon))),
logical(1)),x,''))
restrictedTeamsDF
sort('','dog','alpha')
alpha('','dog','alpha')
sort(c('','dog','alpha'))
concat(sort(c('','dog','alpha')))
paste(sort(c('','dog','alpha')))
str(paste(sort(c('','dog','alpha'))))
str(paste0(sort(c('','dog','alpha'))))
paste0(sort(c('','dog','alpha'))))
paste(sort(c('','dog','alpha'))))
paste(sort(c('','dog','alpha')))
paste0(sort(c('','dog','alpha')))
paste(sort(c('','dog','alpha')),sep = '')
?paste0
paste0(sort(c('','dog','alpha')),sep = '')
paste0(sort(c('','dog','alpha')))
paste0(sort(c('','dog','alpha')),collapse = '')
restrictedTeamsDF
mutate(restrictedTeamsDF, restrictedDuo = paste0(sort(c(x2,x3,x4,x5,x6,x7)),collapse = ''))
mutate(restrictedTeamsDF, restrictedDuo = paste0(sort(c(X2,X3,X4,X5,X6,X7)),collapse = ''))
mutate(restrictedTeamsDF, restrictedDuo = paste0(sort(c(X2,X3,X4,X5,X6,X7)),collapse = ' '))
### Data Cleaning Part 1-- goal is to extract each restricted duo along with the name of the individual who played them
### Resulting data frame should have columns: playerName, restricted1, restricted2
### Load Packages
library(rjson)
library(tidyverse)
### Read json data
tournamentData <- fromJSON(file = "data/NAIC_VGC_Data.json")
nparticipants <- length(tournamentData)
### Generate empty dataframe
teamsDF <- data.frame(
matrix(rep(times = nparticipants, c("","","","","","","")),nrow = nparticipants)
)
### Some teams are missing all their Pokemon, so we will loop through available ones.
## I have manually found rows without teams listed and removed them myself
for(i in (1:nparticipants)[c(-790,-845)]){
v1 <-
teamsDF[i,] <- c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[i]]$decklist, recursive = F)))$name),NA*1:6),6)
)
}
## Convert to tibble for some easy data manipulation
teamsDF <- as_tibble(teamsDF)
## We need a list of restricted Pokemon
restrictedPokemon <- c(
'Mewtwo',
'Lugia',
'Ho-Oh',
'Kyogre',
'Groudon',
'Rayquaza',
'Dialga',
'Palkia',
'Giratina',
'Reshiram',
'Zekrom',
'Kyurem',
'Cosmog',
'Cosmoem',
'Solgaleo',
'Lunala',
'Necrozma',
'Zacian',
'Zamazenta',
'Eternatus',
'Calyrex',
'Koraidon',
'Miraidon',
'Terapagos'
)
## Delete non-restricted Pokemon names
restrictedTeamsDF <- mutate_at(teamsDF,vars(-X1),
function(x) if_else(vapply(x, function(y) as.logical(max(str_detect(y,restrictedPokemon))),
logical(1)),x,NA))
## Did some teams did not use 2 restricted Pokemon?
sort(rowSums(!is.na(restrictedTeamsDF)))
which(rowSums(!is.na(restrictedTeamsDF))!=3)
## Yes! The teams placing 993, 1071, 1086, 1103, 1108, 1112, 1128, 1129 all did not use the full number of allowed restricted Pokemon.
## Two of these teams did not bring ANY restricted Pokemon
## Going to do some string concatenation to get restricted pairs names
restrictedTeamsDF <- mutate_at(teamsDF,vars(-X1),
function(x) if_else(vapply(x, function(y) as.logical(max(str_detect(y,restrictedPokemon))),
logical(1)),x,''))
mutate(restrictedTeamsDF, restrictedDuo = paste0(sort(c(X2,X3,X4,X5,X6,X7)),collapse = ' '))
##
select(restrictedTeamsDF, X1, restrictedDuo)
##
select(restrictedTeamsDF, X1, restrictedDuo)
restrictedTeamsDF <- mutate(restrictedTeamsDF, restrictedDuo = paste0(sort(c(X2,X3,X4,X5,X6,X7)),collapse = ' '))
##
select(restrictedTeamsDF, X1, restrictedDuo)
restrictedTeamsDF[1]
restrictedTeamsDF[2]
restrictedTeamsDF[8]
restrictedTeamsDF[8][1]
restrictedTeamsDF[8]
restrictedTeamsDF <- mutate(restrictedTeamsDF, restrictedDuo = paste0(sort(c(X2,X3,X4,X5,X6,X7)),collapse = ''))
##
select(restrictedTeamsDF, X1, restrictedDuo)
restrictedTeamsDF <- mutate(rowwise(restrictedTeamsDF), restrictedDuo = paste0(sort(c(X2,X3,X4,X5,X6,X7)),collapse = ''))
restrictedTeamsDF
##
select(restrictedTeamsDF, X1, restrictedDuo)
restrictedTeamsDF <- mutate(rowwise(restrictedTeamsDF), restrictedDuo = paste0(sort(c(X2,X3,X4,X5,X6,X7)),collapse = ' '))
##
select(restrictedTeamsDF, X1, restrictedDuo)
na.omit(c(NA,'dog'))
na.omit(c(NA,'dog'))
## Delete non-restricted Pokemon names
restrictedTeamsDF <- mutate_at(teamsDF,vars(-X1),
function(x) if_else(vapply(x, function(y) as.logical(max(str_detect(y,restrictedPokemon))),
logical(1)),x,NA))
### Data Cleaning Part 1-- goal is to extract each restricted duo along with the name of the individual who played them
### Resulting data frame should have columns: playerName, restricted1, restricted2
### Load Packages
library(rjson)
library(tidyverse)
### Read json data
tournamentData <- fromJSON(file = "data/NAIC_VGC_Data.json")
nparticipants <- length(tournamentData)
### Generate empty dataframe
teamsDF <- data.frame(
matrix(rep(times = nparticipants, c("","","","","","","")),nrow = nparticipants)
)
### Some teams are missing all their Pokemon, so we will loop through available ones.
## I have manually found rows without teams listed and removed them myself
for(i in (1:nparticipants)[c(-790,-845)]){
v1 <-
teamsDF[i,] <- c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[i]]$decklist, recursive = F)))$name),NA*1:6),6)
)
}
## Convert to tibble for some easy data manipulation
teamsDF <- as_tibble(teamsDF)
## We need a list of restricted Pokemon
restrictedPokemon <- c(
'Mewtwo',
'Lugia',
'Ho-Oh',
'Kyogre',
'Groudon',
'Rayquaza',
'Dialga',
'Palkia',
'Giratina',
'Reshiram',
'Zekrom',
'Kyurem',
'Cosmog',
'Cosmoem',
'Solgaleo',
'Lunala',
'Necrozma',
'Zacian',
'Zamazenta',
'Eternatus',
'Calyrex',
'Koraidon',
'Miraidon',
'Terapagos'
)
## Delete non-restricted Pokemon names
restrictedTeamsDF <- mutate_at(teamsDF,vars(-X1),
function(x) if_else(vapply(x, function(y) as.logical(max(str_detect(y,restrictedPokemon))),
logical(1)),x,NA))
restrictedTeamsDF
sort(restrictedTeamsDF[1,])
sort(restrictedTeamsDF[[1,]])
restrictedTeamsDF[1,]
as.vector(restrictedTeamsDF[1,])
# String Concatenation to get duo names. The order of the restricted Pokemon is done alphabetically.
restrictedTeamsDF <- mutate(rowwise(restrictedTeamsDF), restrictedDuo = paste0(sort(c(X2,X3,X4,X5,X6,X7)),collapse = ' '))
restrictedTeamsDF
##
select(restrictedTeamsDF, X1, restrictedDuo)
##
restrictedDuosDF <- select(restrictedTeamsDF, X1, restrictedDuo)
restrictedDuosDF
table(restrictedDuosDF$X1)
table(restrictedDuosDF$restrictedDuo)
rename(restrictedDuosDF, playerName = X1)
restrictedDuosDF
## Create new df with just playerName and restrictedDuo
restrictedDuosDF <- select(restrictedTeamsDF, X1, restrictedDuo)
restrictedDuosDF %>% rename(playerName = X1)
restrictedDuosDF
restrictedDuosDF <- rename(restrictedDuosDF, playerName = X1)
restrictedDuosDF
## Save the df as a new csv
write.csv(restrictedDuosDF, file  = 'data/restrictedDuos.csv')
### Data Cleaning Part 1-- goal is to extract each restricted duo along with the name of the individual who played them
### Resulting data frame should have columns: playerName, restrictedDuo
### Load Packages
library(rjson)
library(tidyverse)
### Read json data
tournamentData <- fromJSON(file = "data/NAIC_VGC_Data.json")
nparticipants <- length(tournamentData)
### Generate empty dataframe
teamsDF <- data.frame(
matrix(rep(times = nparticipants, c("","","","","","","")),nrow = nparticipants)
)
### Some teams are missing all their Pokemon, so we will loop through available ones.
## I have manually found rows without teams listed and removed them myself
for(i in (1:nparticipants)[c(-790,-845)]){
v1 <-
teamsDF[i,] <- c(
unlist(tournamentData[[i]]$name),
head(c(unlist(unstack(stack(unlist(tournamentData[[i]]$decklist, recursive = F)))$name),NA*1:6),6)
)
}
## Convert to tibble for some easy data manipulation
teamsDF <- as_tibble(teamsDF)
## We need a list of restricted Pokemon
restrictedPokemon <- c(
'Mewtwo',
'Lugia',
'Ho-Oh',
'Kyogre',
'Groudon',
'Rayquaza',
'Dialga',
'Palkia',
'Giratina',
'Reshiram',
'Zekrom',
'Kyurem',
'Cosmog',
'Cosmoem',
'Solgaleo',
'Lunala',
'Necrozma',
'Zacian',
'Zamazenta',
'Eternatus',
'Calyrex',
'Koraidon',
'Miraidon',
'Terapagos'
)
## Delete non-restricted Pokemon names
restrictedTeamsDF <- mutate_at(teamsDF,vars(-X1),
function(x) if_else(vapply(x, function(y) as.logical(max(str_detect(y,restrictedPokemon))),
logical(1)),x,NA))
## Did some teams did not use 2 restricted Pokemon?
sort(rowSums(!is.na(restrictedTeamsDF)))
which(rowSums(!is.na(restrictedTeamsDF))!=3)
## Yes! The teams placing 993, 1071, 1086, 1103, 1108, 1112, 1128, 1129 all did not use the full number of allowed restricted Pokemon.
## Two of these teams did not bring ANY restricted Pokemon
# String Concatenation to get duo names. The order of the restricted Pokemon is done alphabetically.
restrictedTeamsDF <- mutate(rowwise(restrictedTeamsDF), restrictedDuo = paste0(sort(c(X2,X3,X4,X5,X6,X7)),collapse = ' & '))
## Create new df with just playerName and restrictedDuo
restrictedDuosDF <- select(restrictedTeamsDF, X1, restrictedDuo)
restrictedDuosDF <- rename(restrictedDuosDF, playerName = X1)
## Save the df as a new csv
write.csv(restrictedDuosDF, file  = 'data/restrictedDuos.csv')
